pipeline {
  environment {
     PROJECT = "astro-id"
     APP_NAME = "astro"
     SVC_NAME = "${APP_NAME}-FE"
     CLUSTER_ZONE = "us-west-1a"
     IMAGE_TAG = "gcr.io/${PROJECT}/${APP_NAME}:${env.BRANCH_NAME}:${env.BUILD_NUMBER}"
     JENKINS_CRED = "${PROJECT}"
    }

  stage("Git Clone"){

        git credentialsId: 'GIT_CREDENTIALS', url: 'github url'    
}

stage("Maven build") {
   mvn clean install
 }

stage("Docker build") {
  sh 'docker version'
  sh 'docker build -t nodejs .'
  sh 'docker image list'
  sh 'docker tag astro-nodejs'
}

withCredentials(string[credentialsId: 'DOCKER_HUB_PASSWORD', variable: 'PASSWORD')]) {
    sh 'docker login -u ${username} -p ${password}'
}

stage("Push image to Docker hub") {
  sh ' docker push '
}
 agent {
    kubernetes {
      label 'app'
      defaultContainer 'jnlp'
      yaml """
   apiVersion: apps/v1
   kind: Deployment
   metadata:
     name: astro-nodejs
     labels:
       app: astro-nodejs
   spec:
     selector:
       matchLabels:
         app: astro-nodejs
      template:
        metadata:
          labels:
            app: astro-nodejs 
        spec:
          containers:
          - image: ip_address_of_the_machine:5000/nodejs:10.16.3
            name: nodejs
            imagePullPolicy: Always
            ports:
              - containerPort: 3000
   ---
   apiVersion: v1
   kind: Service
   metadata:
     name: nodejs-svc
   spec:
     ports: 
     - name: "astro-nodejs"
       targetPort: 3000
       port: 3000
       nodePort: 30253
       protocol: TCP
     selector:
       app: astro-nodejs
     type: NodePort
}
}

stage('Deploy canary') {
  when { branch 'canary' }
     steps {
       container('kubectl') {
           sh("sed -i.bak 's#gcr.io/cloud-solutions-images/gceme:1.0.0#${IMAGE_TAG}#' ./k8s/canary/*.yaml")
          step([$class: 'KubernetesEngineBuilder', namespace:'production', projectId: env.PROJECT, clusterName: env.CLUSTER, zone: env.CLUSTER_ZONE, manifestPattern: 'k8s/services', credentialsId: env.JENKINS_CRED, verifyDeployments: false])
          step([$class: 'KubernetesEngineBuilder', namespace:'production', projectId: env.PROJECT, clusterName: env.CLUSTER, zone: env.CLUSTER_ZONE, manifestPattern: 'k8s/canary', credentialsId: env.JENKINS_CRED, verifyDeployments: true])
          sh("echo http://`kubectl --namespace=production get service/${FE_SVC_NAME} -o jsonpath='{.status.loadBalancer.ingress[0].ip}'` > ${FE_SVC_NAME}")
        }
      }
    }
stage('Deploy Production') {
      // Production branch
      when { 
        anyOf { 
          branch 'main' 
          branch 'master' 
        }
      }
      steps{
        container('kubectl') {
        // Change deployed image in canary to the one we just built
          sh("sed -i.bak 's#gcr.io/cloud-solutions-images/gceme:1.0.0#${IMAGE_TAG}#' ./k8s/production/*.yaml")
          step([$class: 'KubernetesEngineBuilder', namespace:'production', projectId: env.PROJECT, clusterName: env.CLUSTER, zone: env.CLUSTER_ZONE, manifestPattern: 'k8s/services', credentialsId: env.JENKINS_CRED, verifyDeployments: false])
          step([$class: 'KubernetesEngineBuilder', namespace:'production', projectId: env.PROJECT, clusterName: env.CLUSTER, zone: env.CLUSTER_ZONE, manifestPattern: 'k8s/production', credentialsId: env.JENKINS_CRED, verifyDeployments: true])
          sh("echo http://`kubectl --namespace=production get service/${FE_SVC_NAME} -o jsonpath='{.status.loadBalancer.ingress[0].ip}'` > ${FE_SVC_NAME}")
        }
      }
    }
    
       
 
              

             
